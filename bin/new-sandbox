#!/usr/bin/env bash

# This script is based on the template here:
#
#     https://gist.github.com/pcrockett/8e04641f8473081c3a93de744873f787
#
# Useful links when writing a script:
#
# Shellcheck: https://github.com/koalaman/shellcheck
# vscode-shellcheck: https://github.com/timonwong/vscode-shellcheck
# https://blog.yossarian.net/2020/01/23/Anybody-can-write-good-bash-with-a-little-effort
#

# https://vaneyckt.io/posts/safer_bash_scripts_with_set_euxo_pipefail/
set -Eeuo pipefail

[[ "${BASH_VERSINFO[0]}" -lt 4 ]] && echo "Bash >= 4 required" && exit 1

SANDBOX_NAME="$1"
SCRIPT_DIR=$(dirname "$(readlink -f "$0")")
REPO_DIR=$(dirname "$SCRIPT_DIR")
CONFIG_DIR="$REPO_DIR/config"

if [ ! -d "$CONFIG_DIR" ]; then
    mkdir "$CONFIG_DIR"
fi

DEFAULT_CONFIG="$REPO_DIR/default-config.sh"
# shellcheck source=/dev/null
. "$DEFAULT_CONFIG"

USER_CONFIG="$REPO_DIR/user-config.sh"
if [ -e "$USER_CONFIG" ]; then
    # shellcheck source=/dev/null
    . "$USER_CONFIG"
fi

if [ ! -d "$FJSB_SANDBOX_ROOT" ]; then
    mkdir "$FJSB_SANDBOX_ROOT"
fi

SANDBOX_HOME="$FJSB_SANDBOX_ROOT/$SANDBOX_NAME"
if [ -d "$SANDBOX_HOME" ]; then
    echo "$SANDBOX_HOME already exists."
    exit 1
fi

HOME_TEMPLATE_DIR="$REPO_DIR/home-template"
if [ -d "$HOME_TEMPLATE_DIR" ]; then
    cp --recursive --dereference "$HOME_TEMPLATE_DIR" "$SANDBOX_HOME"
    # --dereference because we want to allow the user to add symbolic links
    # to the template home directory. However we don't want sandboxed
    # applications to link to files outside the sandbox.
else
    mkdir "$SANDBOX_HOME"
fi
echo "Created $SANDBOX_HOME"

FJ_CONFIG_DIR=~/.config/firejail
if [ ! -d "$FJ_CONFIG_DIR" ]; then
    mkdir "$FJ_CONFIG_DIR"
fi

FJ_PROFILE="$CONFIG_DIR/$SANDBOX_NAME.profile"
if [ -f "$FJ_PROFILE" ]; then
    echo "$FJ_PROFILE already exists."
    exit 1
fi

FJ_PROFILE_LINK="$FJ_CONFIG_DIR/$SANDBOX_NAME.profile"
if [ -f "$FJ_PROFILE_LINK" ]; then
    echo "$FJ_PROFILE_LINK already exists."
fi

cat > "$FJ_PROFILE" << EOF
# Copy/paste/modified from firejail's default.profile

# Persistent local customizations
include default.local
# Persistent global definitions
include globals.local

# generic gui profile
# depending on your usage, you can enable some of the commands below:

noblacklist \${HOME}/.config/openbox

include disable-common.inc
# include disable-devel.inc
# include disable-interpreters.inc
include disable-passwdmgr.inc
# include disable-programs.inc
# include disable-xdg.inc

caps.drop all
ipc-namespace
netfilter
no3d
nodbus
nodvd
nogroups
nonewprivs
noroot
# nosound
notv
# nou2f
# novideo
protocol unix,inet,inet6
seccomp
# shell none
rmenv SESSION_MANAGER

disable-mnt
# private
# private-bin program
private-cache
private-dev
# private-etc none
# private-lib
private-tmp

# memory-deny-write-execute
# noexec /home/phil
# noexec /tmp
read-only /nix

machine-id
hostname $SANDBOX_NAME

private \${HOME}/sandboxes/$SANDBOX_NAME

# /run/user/USERID is used for a lot of IPC - VSCodium being the chief example.
# Whitelisting some random file in this directory will cause the sandbox to see
# an empty directory. If some program inside the sandbox ever writes to this
# directory, those files will only be visible to the sandbox.
whitelist \${RUNUSER}/__not-used__

# X11 sandboxing should always come last
net $FJSB_NET
xephyr-screen $FJSB_SCREEN_SIZE
x11
EOF

ln --symbolic "$FJ_PROFILE" "$FJ_PROFILE_LINK"
echo "Created $FJ_PROFILE"

BIN_DIR=~/.local/bin
if [ ! -d "$BIN_DIR" ]; then
    mkdir "$BIN_DIR"
fi

PROFILE_SCRIPT="$CONFIG_DIR/start-$SANDBOX_NAME"
if [ -f "$PROFILE_SCRIPT" ]; then
    echo "$PROFILE_SCRIPT already exists."
    exit 1
fi

PROFILE_SCRIPT_LINK="$BIN_DIR/start-$SANDBOX_NAME"
if [ -f "$PROFILE_SCRIPT_LINK" ]; then
    echo "$PROFILE_SCRIPT_LINK already exists."
    exit 1
fi

cat > "$PROFILE_SCRIPT" << EOF
#!/usr/bin/env bash

# This script is based on the template here:
#
#     https://gist.github.com/pcrockett/8e04641f8473081c3a93de744873f787
#
# Useful links when writing a script:
#
# Shellcheck: https://github.com/koalaman/shellcheck
# vscode-shellcheck: https://github.com/timonwong/vscode-shellcheck
# https://blog.yossarian.net/2020/01/23/Anybody-can-write-good-bash-with-a-little-effort
#

# https://vaneyckt.io/posts/safer_bash_scripts_with_set_euxo_pipefail/
set -Eeuo pipefail

[[ "\${BASH_VERSINFO[0]}" -lt 4 ]] && echo "Bash >= 4 required" && exit 1

PRE_START_SCRIPT="$REPO_DIR/hooks/pre-start.sh"
if [ -f "\$PRE_START_SCRIPT" ]; then
    FJSB_SANDBOX_NAME="$SANDBOX_NAME" \\
        FJSB_SANDBOX_HOME="$SANDBOX_HOME" \\
        bash "\$PRE_START_SCRIPT"
fi

PLUGINS_FILE="$REPO_DIR/plugins.txt"
if [ -f "\$PLUGINS_FILE" ]; then

    # https://stackoverflow.com/a/1521498
    while IFS= read -r plugin_dir
    do

        pre_start_hook="\$plugin_dir/hooks/pre-start.sh"
        if [ -e "\$pre_start_hook" ]; then
            FJSB_SANDBOX_HOME="$SANDBOX_HOME" \\
                FJSB_SANDBOX_NAME="$SANDBOX_NAME" \\
                "\$pre_start_hook"
        fi

    done < "\$PLUGINS_FILE"

fi

firejail "--profile=$SANDBOX_NAME" "--name=$SANDBOX_NAME" openbox &
EOF

chmod u+x "$PROFILE_SCRIPT"
ln --symbolic "$PROFILE_SCRIPT" "$PROFILE_SCRIPT_LINK"

echo "Created $PROFILE_SCRIPT"

HOOK_DIR="$REPO_DIR/hooks"

if [ -f "$HOOK_DIR/post-create.sh" ]; then
    FJSB_SANDBOX_HOME="$SANDBOX_HOME" \
        FJSB_SANDBOX_NAME="$SANDBOX_NAME" \
        "$HOOK_DIR/post-create.sh"
fi

PLUGINS_FILE="$REPO_DIR/plugins.txt"
if [ -f "$PLUGINS_FILE" ]; then

    # https://stackoverflow.com/a/1521498
    while IFS= read -r plugin_dir
    do

        post_create_hook="$plugin_dir/hooks/post-create.sh"
        if [ -e "$post_create_hook" ]; then
            FJSB_SANDBOX_HOME="$SANDBOX_HOME" \
                FJSB_SANDBOX_NAME="$SANDBOX_NAME" \
                "$post_create_hook"
        fi

    done < "$PLUGINS_FILE"

fi

echo ""
echo "-------------------------------------------------------------"
echo ""
echo "Profile created successfully."
echo "Run start-$SANDBOX_NAME to start the sandbox."
echo ""
echo "-------------------------------------------------------------"
echo ""
